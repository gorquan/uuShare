# (C) Copyright Gevorg Voskanyan 2011-2013.
# Use, modification and distribution are subject to the 
# Boost Software License, Version 1.0. (See http://www.boost.org/LICENSE_1_0.txt)

import set : difference ;

make cpuid.s : x86cpuid.pl : @make_asm ;
make cpuid.s : x86_64cpuid.pl : @make_asm : <address-model>64 ;
# fixme: make cpuid.s for other target architectures as needed

make rc4.s : rc4/asm/rc4-md5-x86_64.pl : @make_asm : <address-model>64 ; #<architecture>x86 ; should always be present

rule make_asm ( targets * : sources * : properties * )
{
	# Assume x86 (32 or 64 bit) for now
	OPTIONS on $(targets) = elf ;	# elf by default (FreeBSD, Linux, etc.)
	if <target-os>darwin in $(properties) {
		OPTIONS on $(targets) = macosx ;
	}
}
actions make_asm
{
	perl $(>) $(OPTIONS) > $(<)
}

alias asm_source : cpuid.s : : : <define>OPENSSL_CPUID_OBJ ;
alias asm_source : : <target-os>windows : : <define>OPENSSL_NO_ASM ;

alias rc4_asm_source ;
alias rc4_asm_source : rc4.s : <address-model>64 ; #<architecture>x86 ; should always be present

local prevent_winsock_inclusion_in_windows_h = <target-os>windows:<define>_WINSOCKAPI_ ;

obj th-lock : threads/th-lock.c : $(prevent_winsock_inclusion_in_windows_h) ;
obj e_aes : evp/e_aes.c : <include>modes ;
lib des_asm : des/des_enc.c des/fcrypt_b.c des/set_key.c : <target-os>darwin,<address-model>64:<define>OPENSSL_NO_ASM ;

import sequence ;
import numbers ;

local crypto_intermediate_libs = ;

rule lib_with_large_number_of_sources ( name : sources * : reqs * : def-build * : usage-reqs * : top-level-reqs * )
{
	# This is for fixing linking issue under OS X. darwin.archive actions is 'piecemeal', meaning it will get invoked
	# multiple times with subsets of input files as necessary to fit in the command line length limitations.
	# Since libtool doesn't (yet) seem to have an option equivalent to ar's -r option (see: 
	# https://macosx.com/tech-support/mac/adding-objects-to-existing-library-using-libtool/22507.html),
	# the input files won't get accumulated, but rather the static library will end up containing only the subset of
	# input files that darwin.archive got invoked with last. This rule may be useful for some other platforms as well.
	local subset_count_max = 141 ;
	local index = 1 ;
	local subset_libs = ;
	local source_count = [ sequence.length $(sources) ] ;
	local subset = ;
	while [ numbers.less [ numbers.decrement $(index) ] $(source_count) ] {
		local next_index = [ CALC $(index) + $(subset_count_max) ] ;
		local subset_end = [ numbers.decrement $(next_index) ] ;
		subset = $(sources[$(index)-$(subset_end)]) ;
		if [ numbers.less $(subset_end) $(source_count) ] {
			local intermediate_name = $(name)_intermediate_$(index) ;
			lib $(intermediate_name) : $(subset) : $(reqs) : $(def-build) ;
			subset_libs += $(intermediate_name) ;
		}
		index = $(next_index) ;
	}
	crypto_intermediate_libs = $(subset_libs) ;
	lib $(name) : $(subset) $(subset_libs) : $(reqs) $(top-level-reqs) : $(def-build) : $(usage-reqs) ;
}

lib_with_large_number_of_sources crypto
			  : [ difference [ glob-tree *.c : jpake rc5 md2 krb5 store .svn ]
								: [ glob LPdir_*.c ] bio/bss_rtcp.c engine/enginetest.c
								  x509v3/tabtest.c x509v3/v3conf.c x509v3/v3prin.c
								  bf/bf_opts.c bf/bfspeed.c bf/bftest.c
								  bn/bnspeed.c bn/bntest.c bn/divtest.c
								  bn/exp.c bn/expspeed.c bn/exptest.c
								  cast/castopts.c cast/cast_spd.c cast/casttest.c
								  conf/test.c conf/cnf_save.c whrlpool/wp_test.c
								  threads/mttest.c des/des.c des/des_opts.c
								  des/destest.c des/rpw.c des/speed.c des/ncbc_enc.c
								  dh/p512.c dh/p1024.c dh/p192.c dh/dhtest.c
								  dsa/dsagen.c dsa/dsatest.c ec/ectest.c
								  ecdh/ecdhtest.c ecdsa/ecdsatest.c evp/evp_test.c
								  sha/sha1.c sha/sha1test.c sha/sha256t.c
								  sha/sha512t.c sha/sha.c sha/shatest.c
								  hmac/hmactest.c idea/idea_spd.c idea/ideatest.c
								  rsa/rsa_test.c lhash/lh_test.c rand/randtest.c
								  ripemd/rmd160.c ripemd/rmdtest.c pqueue/pq_test.c
								  rc4/rc4.c rc4/rc4speed.c rc4/rc4test.c
								  rc2/rc2speed.c rc2/rc2test.c rc2/tab.c
								  pkcs7/dec.c pkcs7/enc.c pkcs7/sign.c pkcs7/verify.c
								  md4/md4test.c md4/md4.c md5/md5.c md5/md5test.c
								  mdc2/mdc2test.c o_dir_test.c
								  # sources with special options
								  threads/th-lock.c evp/e_aes.c
								  des/des_enc.c des/fcrypt_b.c des/set_key.c
								  # conditional sources
								  mem_clr.c armcap.c
								  # experimental sources excluded for now...
								  aes/aes_x86core.c
								  # excluded from build for now...
								  evp/e_dsa.c pkcs7/pk7_enc.c pkcs7/bio_ber.c bn/asm/x86_64-gcc.c des/read_pwd.c
								  # exotic platforms...
								  s390xcap.c sparcv9cap.c
				 ]
				 th-lock
				 e_aes
				 des_asm
				 asm_source
				 rc4_asm_source
			  : <include>. <include>asn1 <include>evp
			    <define>NO_WINDOWS_BRAINDEATH	# Needed only for cversion.c
			    <use>asm_source
			  :
			  :
			  : <conditional>@conditional_sources	# for top-level
;

alias intermediate_libs : $(crypto_intermediate_libs) ;

rule conditional_sources ( properties * )
{
	local sources = ;
	if <target-os>windows in $(properties) {
		sources += mem_clr.c ;	# defines OPENSSL_cleanse() which is already defined in cpuid.s
	}
	if <architecture>arm in $(properties) {
		sources += armcap.c ;
	}
	return <source>$(sources) ;
}

explicit crypto ;
